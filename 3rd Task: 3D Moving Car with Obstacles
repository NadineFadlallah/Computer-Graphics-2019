from OpenGL.GL import *
from OpenGL.GLUT import *
from OpenGL.GLU import *
import pygame
import numpy as np
from math import*

def myInit():
    glMatrixMode(GL_PROJECTION)
    glLoadIdentity()
    gluPerspective(60, 1, 1, 30)
    gluLookAt(8, 9 , 10,
              0, 0, 0,
              0, 1, 0)

    #glClearColor(135/255, 206/255, 235/255, 1)
    glClearColor(25 / 255, 25 / 255, 112 / 255, 1)
    glClear(GL_COLOR_BUFFER_BIT)
def arrowHandler(key, x, y):
    global z
    if key == GLUT_KEY_RIGHT:
        z-= 0.5


    elif key == GLUT_KEY_LEFT:
        z += 0.5


    draw()
angle = 0
step=0
Forward = True
s=0
z=0

def draw():
    global angle
    global step
    global Forward
    global s
    global z
    

    glMatrixMode(GL_MODELVIEW) #VI!
    glLoadIdentity()
    glClear(GL_COLOR_BUFFER_BIT)


    #drawXYZ()

    glLoadIdentity()
    glRotate(-90, 0, 1, 0)
    drawRoad()


    drawRoadLines()

    drawObstacle()

    glColor3f(0, 1, 1)

    glLoadIdentity()
    glRotate(-90, 0, 1, 0)
    glTranslate(0, 0, z)
    glTranslate(step, 0, 0)
    glTranslate(0.5 * 5, -0.5 * 0.25 * 5, 0.5 * 0.5 * 5)
    glRotate(angle, 0, 0, 1)
    glutWireTorus(0.125, 0.5, 10, 10)

    glLoadIdentity()
    glRotate(-90, 0, 1, 0)
    glTranslate(0, 0, z)
    glTranslate(step, 0, 0)
    glTranslate(0.5 * 5, -0.5 * 0.25 * 5, -0.5 * 0.5 * 5)
    glRotate(angle, 0, 0, 1)
    glutWireTorus(0.125, 0.5, 10, 10)

    glLoadIdentity()
    glRotate(-90, 0, 1, 0)
    glTranslate(0, 0, z)
    glTranslate(step, 0, 0)
    glTranslate(-0.5 * 5, -0.5 * 0.25 * 5, -0.5 * 0.5 * 5)
    glRotate(angle, 0, 0, 1)
    glutWireTorus(0.125, 0.5, 10, 10)

    glLoadIdentity()
    glRotate(-90, 0, 1, 0)
    glTranslate(0, 0, z)
    glTranslate(step, 0, 0)
    glTranslate(-0.5 * 5, -0.5 * 0.25 * 5, 0.5 * 0.5 * 5)
    glRotate(angle, 0, 0, 1)
    glutWireTorus(0.125, 0.5, 10, 10)


    glLoadIdentity()
    glRotate(-90, 0, 1, 0)
    glTranslate(0, 0, z)
    glTranslate(step,0,0.5)
    glColor3f(179/255, 34/255, 34/255)
    glScale(1, 0.25, 0.5)
    glutSolidCube(5)

    glLoadIdentity()
    glRotate(-90, 0, 1, 0)
    glTranslate(0, 0, z)
    glColor3f(205 / 255, 92 / 255, 92 / 255)
    glTranslate(step, 0, 0.5)
    glTranslate(0,5*0.25,0)
    glScale(0.5, 0.25, 0.5)
    glutSolidCube(5)

    glLoadIdentity()
    glRotate(-90, 0, 1, 0)
    glTranslate(0, 0, z)
    glTranslate(step, 0, 0.5)
    glTranslate(1.2, 5 * 0.25, -0.1)
    glScale(0.01, 0.2, 0.45)
    glColor3f(135/255, 206/255, 250/255)
    glutSolidCube(5)


    glColor3f(1, 1, 0)
    glLoadIdentity()
    glRotate(-90, 0, 1, 0)
    glTranslate(0, 0, z)
    glTranslate(step, 0, 0.5)
    glTranslate(0.5 * 5, -0.5 * 0.25 * 5 + 1.5, -0.5 * 0.5 * 5 + 0.75)
    glRotate(angle, 0, 0, 0.5)
    glutWireTorus(0.125, 0.25, 10, 10)

    glColor3f(1, 1, 0)
    glLoadIdentity()
    glRotate(-90, 0, 1, 0)
    glTranslate(0, 0, z)
    glTranslate(step, 0, 0.5)
    glTranslate(0.5 * 5, -0.5 * 0.25 * 5 + 1.5, -0.5 * 0.5 * 5 + 1.75)
    glRotate(angle, 0, 0, 1)
    glutWireTorus(0.125, 0.25, 10, 10)



    if Forward:
        angle -= 0.3
        step += 0.01
        if (step > 6):
            Forward = False

    else:
        angle += 0.3
        step -= 0.01
        if (step < -6):
            Forward = True

    glutSwapBuffers()


def drawXYZ():

    glBegin(GL_LINES)
    glColor3f(1,0,0)
    glVertex(0, 0, 0)
    glVertex(10,0,0)

    glColor3f(0, 1, 0)
    glVertex(0, 0, 0)
    glVertex(0, 10, 0)

    glColor3f(0, 0, 1)
    glVertex(0, 0, 0)
    glVertex(0, 0, 10)
    glEnd()

def drawRoad():

    glBegin(GL_QUADS)
    glColor3f(0.5,0.5,0.5)
    glVertex3f(-25, 0, -3.5)
    glVertex3f(-25,0,3.5)
    glVertex3f(25, 0, 3.5)
    glVertex3f(25, 0, -3.5)
    glEnd()
    
    
def drawRoadLines():

    for x in np.arange(0,30, 7):
        glLoadIdentity()
        glRotate(-90, 0, 1, 0)
        glTranslate(x,0,0)
        glBegin(GL_QUADS)
        glColor3f(1, 1, 0)
        glVertex3f(-20, 0, 0.5)
        glVertex3f(-20, 0, -0.5)
        glVertex3f(-16, 0, -0.5)
        glVertex3f(-16, 0, 0.5)
        glEnd()

def drawObstacle():

    glLoadIdentity()
    glRotate(90, 0, 1, 0)
    glTranslate(2*step, 0, 1)
    glColor3f(1, 0.5, 0.2)
    glutSolidSphere(0.75, 100, 100)

    glLoadIdentity()
    glRotate(-90, 0, 1, 0)
    glTranslate(6 * step, 0, 1.5)
    glColor3f(1, 0, 0)
    glutSolidSphere(1, 100, 100)





glutInit()
glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB)
glutInitWindowSize(600, 600)
glutCreateWindow(b"Moving Car")
glutDisplayFunc(draw)
myInit()
glutIdleFunc(draw)
glutSpecialFunc(arrowHandler)
glutMainLoop()
